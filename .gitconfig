[user]
  # name =
  # email =
  # signingkey =

[alias]
  # View abbreviated SHA, description, and history graph
  l = log --pretty=oneline --graph --abbrev-commit --decorate --first-parent

  # View abbreviated SHA, description, and history graph with merge commits included
  lm = log --pretty=oneline --graph --abbrev-commit --decorate

  # View abbreviated SHA, description, and history graph with all the branches
  la = log --pretty=oneline --graph --abbrev-commit --decorate --all

  # View the current working tree status using the short format
  s = status -s

  # Diff
  d = diff

  # Diff cached files included
  dc = diff --cached

  # Diff only files with color
  df = "!f() { git diff --name-status \"$@\" | while read i; do if [[ ${i:0:1} == \"M\" ]]; then echo \"\\033[32m $i \\033[0m\"; elif [[ ${i:0:1} == \"D\" ]]; then echo \"\\033[31m $i \\033[0m\"; elif [[ ${i:0:1} == \"A\" ]]; then echo \"\\033[33m $i \\033[0m\"; elif [[ ${i:0:1} == \"R\" ]]; then echo \"\\033[33m $i \\033[0m\"; else echo \"$i\"; fi; done; }; f"

  # Diff only files with color included cached
  dfc = "!f() { git diff --name-status --cached \"$@\" | while read i; do if [[ ${i:0:1} == \"M\" ]]; then echo \"\\033[32m $i \\033[0m\"; elif [[ ${i:0:1} == \"D\" ]]; then echo \"\\033[31m $i \\033[0m\"; elif [[ ${i:0:1} == \"A\" ]]; then echo \"\\033[33m $i \\033[0m\"; elif [[ ${i:0:1} == \"R\" ]]; then echo \"\\033[33m $i \\033[0m\"; else echo \"$i\"; fi; done; }; f"

  # Pull in remote changes for the current repository and all its submodules
  p = pull --recurse-submodules

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contrib = shortlog --summary --numbered

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Show the user email for the current repository.
  whoami = config user.email

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

  # Convert CRLF to LF on commit but not the other way around.
  # More info: https://git-scm.com/book/tr/v2/Customizing-Git-Git-Configuration#_code_core_autocrlf_code
  autocrlf = input

  # Do not ignore file permissions
  fileMode = true

  # Line ending type
  eol = native

  # Use d-s-f theme for diffs (npm i -g diff-so-fancy)
  pager = diff-so-fancy | less --tabs=4 -R

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  interactive = auto
  ui = true
  pager = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[commit]
  # https://help.github.com/articles/signing-commits-using-gpg/
  gpgsign = true

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 20

[push]
  # https://git-scm.com/docs/git-config#git-config-pushdefault
  default = current
  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[filter "lfs"]
  required = true
  clean = git-lfs clean %f
  smudge = git-lfs smudge %f

[pull]
  rebase = true
  ff = true

[commit]
  #template = ~/.gitmessage

[diff]
  # Detect copies as well as renames
  renames = copies
  tool = WebStorm

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[difftool "WebStorm"]
  cmd = /Applications/WebStorm.app/Contents/MacOS/webstorm diff $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE")

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = false
  tool = WebStorm

[mergetool]
  keepBackup = false

[mergetool "WebStorm"]
  cmd = /Applications/WebStorm.app/Contents/MacOS/webstorm merge $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE") $(cd $(dirname "$BASE") && pwd)/$(basename "$BASE") $(cd $(dirname "$MERGED") && pwd)/$(basename "$MERGED")
  trustExitCode = true
